//****************************************Definitions****************************************

const int motorA1 = 9;
const int motorA2 = 10;
const int motorB1 = 6;
const int motorB2 = 5;
//const int MotorR1 = 6;
//const int MotorR2 = 7;

const int TriggerPin = 11;
const int EchoPin = 12;

//Gripper definition
const int servoPin = 11; 
#define openAngle 90;
#define closeAngle 0; 
#define pwmFrequency 50;
 
int sensorValues[] = {0,0,0,0,0,0,0,0};
int sensorPins[] = {A0,A1,A2,A3,A4,A5,A6,A7};
 
volatile int L = 0;
volatile int R = 0;


bool canStart = false;
bool cookingRight = false;
bool cookingLeft = false;
bool detectSquare = false;
bool check = true;
bool first = false;
bool canEnter = true;

void setup() {
  Serial.begin(9600);
  
  pinMode(motorA1, OUTPUT);
  pinMode(motorA2, OUTPUT);
  pinMode(motorB1, OUTPUT);
  pinMode(motorB2, OUTPUT);
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  pinMode(A3, INPUT);
  pinMode(A4, INPUT);
  pinMode(A5, INPUT);
  pinMode(A6, INPUT);
  pinMode(A7, INPUT);

  pinMode(TriggerPin, OUTPUT);
  pinMode(EchoPin, INPUT);
 
// attachInterrupt(digitalPinToInterrupt(MotorR1), ISR_L, CHANGE);
// attachInterrupt(digitalPinToInterrupt(MotorR2), ISR_R, CHANGE);
}

//****************************************Loop****************************************
void loop()
{
  if(canEnter){
    enter();
    canEnter = false;
  }
  else lineFollower();
}
//******************* *********************Line Follower****************************************
void lineFollower()
{
  for(int i = 0; i < sizeof(sensorPins) / sizeof(sensorPins[0]); i++) 
  {
    int sensorState = analogRead(sensorPins[i]);
    sensorValues[i] = sensorState >= 700 ? 1 : 0;
 
    Serial.print(sensorValues[i]);
    Serial.print(" ");
 
   }
    Serial.println("");

  if (sensorValues[3] == 1 || sensorValues[4] == 1) 
  {
    forward();
    cookingRight = false;
    cookingLeft = false;   
  }
  else if(cookingLeft)
  {
    left();
  }
  else if (cookingRight)
  {
    right();
  }
  else if ((sensorValues[0] == 1 || sensorValues[1] == 1))
  {
    while(sensorValues[3] != 1 && sensorValues[4] != 1){
      getLineSensor();
      right();
    }
      
  }
  else if ((sensorValues[7] == 1 || sensorValues[6] == 1))
  {
    while(sensorValues[3] != 1 && sensorValues[4] != 1)
    {
      getLineSensor();
      left(); 
    }
  }
  else if (sensorValues[0] == 0 && sensorValues[1] == 0 && sensorValues[2] == 0 && sensorValues[3] == 0 && 
        sensorValues[4] == 0 && sensorValues[5] == 0 && sensorValues[6] == 0 && sensorValues[7] == 0) 
  {
    // If all sensors are off the line, turn around
    adjustLeft();
  }
  else if (sensorValues[0] == 1 && sensorValues[1] == 1 && sensorValues[2] == 1 && sensorValues[3] == 1 && 
        sensorValues[4] == 1 && sensorValues[5] == 1 && sensorValues[6] == 1 && sensorValues[7] == 1) 
  {
    // If all sensors are on the line, 
  }
}

void ISR_L() 
{
  L++;
}
 
void ISR_R() 
{
  R++;
}
 
void turnLeft(int d)
{
  L=0;
  R=0;
 
  while(L < d)
  {
    analogWrite(motorA1, LOW); 
    analogWrite(motorA2, LOW);
    analogWrite(motorB1, 150); 
    analogWrite(motorB2, LOW);
 
    Serial.println(L);
  }
  stop();
}
 
void turnRight(int d){
  L=0;
  R=0;
 
  while(R < d)
  {
    analogWrite(motorA1, 250); 
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 0); 
    analogWrite(motorB2, 0);
 
    Serial.println(R);
  }
  stop();
}

void detectObject()
{
  int distance = getUltrasonicDistance();

  if(distance < 25)
  {
    check = false;
  } 
}


void enter()
{

  int lines = 0;
  
  while (lines < 3)
  {
    getLineSensor();
    forward();

    if (sensorAllBlack()){
      lines += 1;
      delay(200);
    }
    else if (sensorAllWhite()){
      forward();
    }
    
    if (lines > 2){

      
      stop();
      activateGripper(1000);
      delay(1000);
      forward();
      delay(200);
      stop();
      left();
      delay(400);
      break;
    }
  }
}


int getUltrasonicDistance(){
  digitalWrite(TriggerPin, LOW);
  delayMicroseconds(5);
  digitalWrite(TriggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(TriggerPin, LOW);

  long duration = pulseIn(EchoPin, HIGH);
  int distance = duration * 0.034 / 2;

  return distance;
}
//****************************************Gripper****************************************
void activateGripper(int pulse)
{
  for (int i = 0; i < 10; i++)
  {
    digitalWrite(servoPin, HIGH);
    delayMicroseconds(pulse);
    digitalWrite(servoPin, LOW);
    delay(20);
  }
}



void getLineSensor()
{
for(int i = 0; i < sizeof(sensorPins) / sizeof(sensorPins[0]); i++) {
    int sensorState = analogRead(sensorPins[i]);
    sensorValues[i] = sensorState >= 700 ? 1 : 0;
 
    Serial.print(sensorValues[i]);
    Serial.print(" ");
 
   }
    Serial.println("");

}

//****************************************Motor****************************************
void forward()
 {
    analogWrite(motorA1, 230); 
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 230); 
    analogWrite(motorB2, 0);
 }

// void sluggardlyForward()
// {
//    analogWrite(motorA1, 250); 
//    analogWrite(motorA2, 0);
//    analogWrite(motorB1, 250); 
//    analogWrite(motorB2, 0);
// }

 
void backward()
{
 
    analogWrite(motorA1, 0);
    analogWrite(motorA2, 180); 
    analogWrite(motorB1, 0);
    analogWrite(motorB2, 180); 
 
}
void stop() {
    analogWrite(motorA1, 0);
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 0);
    analogWrite(motorB2, 0);
}
 
void left() 
{
    analogWrite(motorA1, 200);
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 0);
    analogWrite(motorB2, 200);
}
 
void right() 
{
    analogWrite(motorA1, 0);
    analogWrite(motorA2, 200);
    analogWrite(motorB1, 200);
    analogWrite(motorB2, 0);
}
 
void adjustLeft() 
{
    analogWrite(motorA1, 0);
    analogWrite(motorA2, 150);
    analogWrite(motorB1, 200);
    analogWrite(motorB2, 0);
}
void adjustRight()
{
    analogWrite(motorA1, 250);
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 0);
    analogWrite(motorB2, 150);
}
void turnAround()
{
    analogWrite(motorA1, 150);
    analogWrite(motorA2, 0);
    analogWrite(motorB1, 0);
    analogWrite(motorB2, 200);
}

//****************************************Boolean Line Sensor****************************************
bool sensorAllBlack()
{
  return (sensorValues[0] == 1 && sensorValues[1] == 1 && sensorValues[2] == 1 && sensorValues[3] == 1 && 
        sensorValues[4] == 1 && sensorValues[5] == 1 && sensorValues[6] == 1 && sensorValues[7] == 1);
}

bool sensorAllWhite()
{
  return (sensorValues[0] == 0 && sensorValues[1] == 0 && sensorValues[2] == 0 && sensorValues[3] == 0 && 
        sensorValues[4] == 0 && sensorValues[5] == 0 && sensorValues[6] == 0 && sensorValues[7] == 0);
}
